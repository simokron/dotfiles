#Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
unsetopt beep
bindkey -e
#End of lines configured by zsh-newuser-install

#The following lines were added by compinstall
zstyle :compinstall filename ~/.zshrc

autoload -U compinit
compinit
#End of lines added by compinstall

#This allows setting menuselect hotkeys
zmodload zsh/complist

#This alters the appearance of autocompletion
zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'

#This sets the option to ignore duplicate history lines
setopt HIST_IGNORE_DUPS

#Persistant rehash for auto-completion
setopt nohashdirs
setopt nohashcmds

# This sets the case insensitivity
zstyle ':completion:*' matcher-list '' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}'

#This disables autocomplete of unavailable commands
zstyle ':completion:*:functions' ignored-patterns '_*'

#This shows a list of completion options
zstyle ':completion:*' menu select

#This selects the prompt style and sets an exit status indicator
#autoload -U promptinit
#promptinit
#prompt redhat
if [ $SSH_CONNECTION ]; then SSH="%n@%m "; else SSH=""; fi
PROMPT=%1(j.[%j].)'['$SSH%~']'%(!.#.$)' '
RPROMPT=%(?..(%?%))

#This enables the help command
autoload -U run-help
autoload run-help-git
autoload run-help-svn
autoload run-help-svk
unalias run-help &>/dev/null
alias help=run-help

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        printf '%s' "${terminfo[smkx]}"
    }
    function zle-line-finish () {
        printf '%s' "${terminfo[rmkx]}"
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi

#This sets the dynamic window title
case $TERM in
	xterm*|*rxvt*)
	precmd () {print -Pn "\e]0;%n@%m: %~\a"}
	;;
esac

#This prevents SIGSTOP at Ctrl-S
stty -ixon

#This enables the use of colors
#autoload -U colors && colors

#This sets autocd
#setopt autocd

#This sets cd to never select parent directory
zstyle ':completion:*:cd:*' ignore-parents parent pwd

#This removes the trailing slash of directories used as arguments
zstyle ':completion:*' squeeze-slashes true

#This activates auto-correction
setopt correct

#This loads a syntax highlighting plugin
#source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

#This hides gtk3 app messages about not being able to register with accessibility bus
export NO_AT_BRIDGE=1

#This sets autocomplete for aliases
setopt no_complete_aliases

#This sets default editor to nvim
export EDITOR=nvim

#Aliases
alias -g L="|less -FX"
alias x="chmod +x"
alias sx="sudo chmod +x"
alias ls="ls -X --color=auto"
alias ll="ls -lh --color=auto"
alias e="$EDITOR"
alias se="sudoedit"
alias ..="cd .."
alias ..2="cd ../.."
alias rm="noglob timeout 10 rm -iv --one-file-system"
alias srm="noglob timeout 10 sudo rm -iv --one-file-system"
alias trash="/usr/bin/mv -v -t /home/${USER}/.local/share/Trash/files/ "$@""
alias -g cp="cp -iv"
alias -g mv="mv -iv"
alias rcp="rsync -a --stats --progress"
alias sshcp="rsync -avHPe \"ssh -p$SSH_PORT\""

alias gs="git status -sb"
alias ga="git add"
alias gc="git commit -m"

alias hwmon="glances -1 -t 1"
alias evpn='nordvpn connect'
alias dvpn='nordvpn disconnect'
alias scrShot='maim ~/scrShot.png'
alias extractFrames='convert -coalesce'

alias resetSink='paswitch alsa_output.pci-0000_00_1b.0.iec958-stereo'

if [[ $(hostname) == 'freya' ]] ; then
	function rbw {
		WINDOWS_TITLE=`sudo grep -i 'windows' /boot/grub/grub.cfg|cut -d"'" -f2`
		sudo grub-reboot "$WINDOWS_TITLE"
		sudo reboot
	}
else
	alias wifi-menu="sudo wifi-menu -o"

	function rbw {
		sudo efibootmgr -n 0002
		reboot
	}
fi

#YouTube playlist functions
function playList() {
	mpv --playlist=/home/simokron/playlist --playlist-start=$1
}
function getList() {
	youtube-dl -j --flat-playlist --playlist-reverse "https://www.youtube.com/playlist?list=PLHw7hcztgbtsPtqaSvuSJezNDkT_f3wZh" | jq -r '.id' | sed 's_^_https://youtu.be/_' > /home/simokron/playlist
}

#Function optimise PDF files.
function optPDF() {
	~/dotfiles/optfile.sh $1
}

syu ()
{
	trizen -Syu --noedit "$@" --quiet
	(~/.config/bspwm/panel_resources/updates > "$PANEL_FIFO" &)
}

mkcd ()
{
	mkdir -p "$1";
	cd "$1"
}

ne ()
{
	(urxvt -e $EDITOR "$@" &)
}

nse ()
{
	(urxvt -e sudoedit "$@" &)
}

new ()
{
	(urxvt -e "$@" &)
}

clpkg ()
{
	if [[ $(pacman -Qtd) ]]
	then
		echo "Clearing unaffiliated packages..."
		sudo pacman -Rns $(pacman -Qtdq)
	else
		echo "No unaffiliated packages found."
	fi
}

emptytrash ()
{
	printf '%s ' 'Delete all files in ~/.local/share/Trash/files/? [y/N]'
	read -rs -k 1 ans
	echo
	case "${ans}" in
		y|Y|$'\n')
			/usr/bin/rm -rv /home/${USER}/.local/share/Trash/files/*
			;;

		*)
			echo "No files removed."
		esac
}

function extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
			*.tar.xz)	 tar xvJf $1	 ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

#Prevent nested ranger instances
ranger() {
    if [ -z "$RANGER_LEVEL" ]; then
        /usr/bin/ranger "$@"
    else
        exit
    fi
}

#Online services
cs() { curl cheat.sh/$1; }

#create a zkbd compatible hash;
#to add other keys to this hash, see: man 5 terminfo
typeset -A key

key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

#setup key accordingly
[[ -n "${key[Home]}"     ]]  && bindkey  "${key[Home]}"     beginning-of-line
[[ -n "${key[End]}"      ]]  && bindkey  "${key[End]}"      end-of-line
[[ -n "${key[Insert]}"   ]]  && bindkey  "${key[Insert]}"   overwrite-mode
[[ -n "${key[Delete]}"   ]]  && bindkey  "${key[Delete]}"   delete-char
[[ -n "${key[Up]}"       ]]  && bindkey  "${key[Up]}"       up-line-or-history
[[ -n "${key[Down]}"     ]]  && bindkey  "${key[Down]}"     down-line-or-history
[[ -n "${key[Left]}"     ]]  && bindkey  "${key[Left]}"     backward-char
[[ -n "${key[Right]}"    ]]  && bindkey  "${key[Right]}"    forward-char
[[ -n "${key[PageUp]}"   ]]  && bindkey  "${key[PageUp]}"   history-beginning-search-backward
[[ -n "${key[PageDown]}" ]]  && bindkey  "${key[PageDown]}" history-beginning-search-forward

bindkey -M menuselect '^[[Z' reverse-menu-complete

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
